// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package store

import (
	"gym-map/model"

	mock "github.com/stretchr/testify/mock"
)

// NewMockInstruction creates a new instance of MockInstruction. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInstruction(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInstruction {
	mock := &MockInstruction{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockInstruction is an autogenerated mock type for the Instruction type
type MockInstruction struct {
	mock.Mock
}

type MockInstruction_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInstruction) EXPECT() *MockInstruction_Expecter {
	return &MockInstruction_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type MockInstruction
func (_mock *MockInstruction) Delete(modelId int) error {
	ret := _mock.Called(modelId)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int) error); ok {
		r0 = returnFunc(modelId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockInstruction_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockInstruction_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - modelId
func (_e *MockInstruction_Expecter) Delete(modelId interface{}) *MockInstruction_Delete_Call {
	return &MockInstruction_Delete_Call{Call: _e.mock.On("Delete", modelId)}
}

func (_c *MockInstruction_Delete_Call) Run(run func(modelId int)) *MockInstruction_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockInstruction_Delete_Call) Return(err error) *MockInstruction_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockInstruction_Delete_Call) RunAndReturn(run func(modelId int) error) *MockInstruction_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockInstruction
func (_mock *MockInstruction) Get() ([]model.Instruction, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []model.Instruction
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]model.Instruction, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []model.Instruction); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Instruction)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockInstruction_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockInstruction_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
func (_e *MockInstruction_Expecter) Get() *MockInstruction_Get_Call {
	return &MockInstruction_Get_Call{Call: _e.mock.On("Get")}
}

func (_c *MockInstruction_Get_Call) Run(run func()) *MockInstruction_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInstruction_Get_Call) Return(instructions []model.Instruction, err error) *MockInstruction_Get_Call {
	_c.Call.Return(instructions, err)
	return _c
}

func (_c *MockInstruction_Get_Call) RunAndReturn(run func() ([]model.Instruction, error)) *MockInstruction_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByExerciseId provides a mock function for the type MockInstruction
func (_mock *MockInstruction) GetByExerciseId(exerciseId int) ([]model.Instruction, error) {
	ret := _mock.Called(exerciseId)

	if len(ret) == 0 {
		panic("no return value specified for GetByExerciseId")
	}

	var r0 []model.Instruction
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int) ([]model.Instruction, error)); ok {
		return returnFunc(exerciseId)
	}
	if returnFunc, ok := ret.Get(0).(func(int) []model.Instruction); ok {
		r0 = returnFunc(exerciseId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Instruction)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int) error); ok {
		r1 = returnFunc(exerciseId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockInstruction_GetByExerciseId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByExerciseId'
type MockInstruction_GetByExerciseId_Call struct {
	*mock.Call
}

// GetByExerciseId is a helper method to define mock.On call
//   - exerciseId
func (_e *MockInstruction_Expecter) GetByExerciseId(exerciseId interface{}) *MockInstruction_GetByExerciseId_Call {
	return &MockInstruction_GetByExerciseId_Call{Call: _e.mock.On("GetByExerciseId", exerciseId)}
}

func (_c *MockInstruction_GetByExerciseId_Call) Run(run func(exerciseId int)) *MockInstruction_GetByExerciseId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockInstruction_GetByExerciseId_Call) Return(instructions []model.Instruction, err error) *MockInstruction_GetByExerciseId_Call {
	_c.Call.Return(instructions, err)
	return _c
}

func (_c *MockInstruction_GetByExerciseId_Call) RunAndReturn(run func(exerciseId int) ([]model.Instruction, error)) *MockInstruction_GetByExerciseId_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function for the type MockInstruction
func (_mock *MockInstruction) GetById(modelId int) (model.Instruction, error) {
	ret := _mock.Called(modelId)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 model.Instruction
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int) (model.Instruction, error)); ok {
		return returnFunc(modelId)
	}
	if returnFunc, ok := ret.Get(0).(func(int) model.Instruction); ok {
		r0 = returnFunc(modelId)
	} else {
		r0 = ret.Get(0).(model.Instruction)
	}
	if returnFunc, ok := ret.Get(1).(func(int) error); ok {
		r1 = returnFunc(modelId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockInstruction_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type MockInstruction_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - modelId
func (_e *MockInstruction_Expecter) GetById(modelId interface{}) *MockInstruction_GetById_Call {
	return &MockInstruction_GetById_Call{Call: _e.mock.On("GetById", modelId)}
}

func (_c *MockInstruction_GetById_Call) Run(run func(modelId int)) *MockInstruction_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockInstruction_GetById_Call) Return(model1 model.Instruction, err error) *MockInstruction_GetById_Call {
	_c.Call.Return(model1, err)
	return _c
}

func (_c *MockInstruction_GetById_Call) RunAndReturn(run func(modelId int) (model.Instruction, error)) *MockInstruction_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUserId provides a mock function for the type MockInstruction
func (_mock *MockInstruction) GetByUserId(userId string) ([]model.Instruction, error) {
	ret := _mock.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserId")
	}

	var r0 []model.Instruction
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]model.Instruction, error)); ok {
		return returnFunc(userId)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []model.Instruction); ok {
		r0 = returnFunc(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Instruction)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(userId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockInstruction_GetByUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUserId'
type MockInstruction_GetByUserId_Call struct {
	*mock.Call
}

// GetByUserId is a helper method to define mock.On call
//   - userId
func (_e *MockInstruction_Expecter) GetByUserId(userId interface{}) *MockInstruction_GetByUserId_Call {
	return &MockInstruction_GetByUserId_Call{Call: _e.mock.On("GetByUserId", userId)}
}

func (_c *MockInstruction_GetByUserId_Call) Run(run func(userId string)) *MockInstruction_GetByUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockInstruction_GetByUserId_Call) Return(instructions []model.Instruction, err error) *MockInstruction_GetByUserId_Call {
	_c.Call.Return(instructions, err)
	return _c
}

func (_c *MockInstruction_GetByUserId_Call) RunAndReturn(run func(userId string) ([]model.Instruction, error)) *MockInstruction_GetByUserId_Call {
	_c.Call.Return(run)
	return _c
}

// GetManyByIds provides a mock function for the type MockInstruction
func (_mock *MockInstruction) GetManyByIds(modelIds []int) ([]model.Instruction, error) {
	ret := _mock.Called(modelIds)

	if len(ret) == 0 {
		panic("no return value specified for GetManyByIds")
	}

	var r0 []model.Instruction
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]int) ([]model.Instruction, error)); ok {
		return returnFunc(modelIds)
	}
	if returnFunc, ok := ret.Get(0).(func([]int) []model.Instruction); ok {
		r0 = returnFunc(modelIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Instruction)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]int) error); ok {
		r1 = returnFunc(modelIds)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockInstruction_GetManyByIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetManyByIds'
type MockInstruction_GetManyByIds_Call struct {
	*mock.Call
}

// GetManyByIds is a helper method to define mock.On call
//   - modelIds
func (_e *MockInstruction_Expecter) GetManyByIds(modelIds interface{}) *MockInstruction_GetManyByIds_Call {
	return &MockInstruction_GetManyByIds_Call{Call: _e.mock.On("GetManyByIds", modelIds)}
}

func (_c *MockInstruction_GetManyByIds_Call) Run(run func(modelIds []int)) *MockInstruction_GetManyByIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]int))
	})
	return _c
}

func (_c *MockInstruction_GetManyByIds_Call) Return(models []model.Instruction, err error) *MockInstruction_GetManyByIds_Call {
	_c.Call.Return(models, err)
	return _c
}

func (_c *MockInstruction_GetManyByIds_Call) RunAndReturn(run func(modelIds []int) ([]model.Instruction, error)) *MockInstruction_GetManyByIds_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function for the type MockInstruction
func (_mock *MockInstruction) Insert(model1 *model.Instruction) error {
	ret := _mock.Called(model1)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*model.Instruction) error); ok {
		r0 = returnFunc(model1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockInstruction_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type MockInstruction_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - model1
func (_e *MockInstruction_Expecter) Insert(model1 interface{}) *MockInstruction_Insert_Call {
	return &MockInstruction_Insert_Call{Call: _e.mock.On("Insert", model1)}
}

func (_c *MockInstruction_Insert_Call) Run(run func(model1 *model.Instruction)) *MockInstruction_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Instruction))
	})
	return _c
}

func (_c *MockInstruction_Insert_Call) Return(err error) *MockInstruction_Insert_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockInstruction_Insert_Call) RunAndReturn(run func(model1 *model.Instruction) error) *MockInstruction_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// SaveMedia provides a mock function for the type MockInstruction
func (_mock *MockInstruction) SaveMedia(id int, media_ids []int) error {
	ret := _mock.Called(id, media_ids)

	if len(ret) == 0 {
		panic("no return value specified for SaveMedia")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int, []int) error); ok {
		r0 = returnFunc(id, media_ids)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockInstruction_SaveMedia_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveMedia'
type MockInstruction_SaveMedia_Call struct {
	*mock.Call
}

// SaveMedia is a helper method to define mock.On call
//   - id
//   - media_ids
func (_e *MockInstruction_Expecter) SaveMedia(id interface{}, media_ids interface{}) *MockInstruction_SaveMedia_Call {
	return &MockInstruction_SaveMedia_Call{Call: _e.mock.On("SaveMedia", id, media_ids)}
}

func (_c *MockInstruction_SaveMedia_Call) Run(run func(id int, media_ids []int)) *MockInstruction_SaveMedia_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].([]int))
	})
	return _c
}

func (_c *MockInstruction_SaveMedia_Call) Return(err error) *MockInstruction_SaveMedia_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockInstruction_SaveMedia_Call) RunAndReturn(run func(id int, media_ids []int) error) *MockInstruction_SaveMedia_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockInstruction
func (_mock *MockInstruction) Update(model1 *model.Instruction) error {
	ret := _mock.Called(model1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*model.Instruction) error); ok {
		r0 = returnFunc(model1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockInstruction_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockInstruction_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - model1
func (_e *MockInstruction_Expecter) Update(model1 interface{}) *MockInstruction_Update_Call {
	return &MockInstruction_Update_Call{Call: _e.mock.On("Update", model1)}
}

func (_c *MockInstruction_Update_Call) Run(run func(model1 *model.Instruction)) *MockInstruction_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Instruction))
	})
	return _c
}

func (_c *MockInstruction_Update_Call) Return(err error) *MockInstruction_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockInstruction_Update_Call) RunAndReturn(run func(model1 *model.Instruction) error) *MockInstruction_Update_Call {
	_c.Call.Return(run)
	return _c
}
