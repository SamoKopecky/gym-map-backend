// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package store

import (
	"gym-map/model"

	mock "github.com/stretchr/testify/mock"
)

// NewMockMachine creates a new instance of MockMachine. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMachine(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMachine {
	mock := &MockMachine{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMachine is an autogenerated mock type for the Machine type
type MockMachine struct {
	mock.Mock
}

type MockMachine_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMachine) EXPECT() *MockMachine_Expecter {
	return &MockMachine_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type MockMachine
func (_mock *MockMachine) Delete(modelId int) error {
	ret := _mock.Called(modelId)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int) error); ok {
		r0 = returnFunc(modelId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMachine_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockMachine_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - modelId
func (_e *MockMachine_Expecter) Delete(modelId interface{}) *MockMachine_Delete_Call {
	return &MockMachine_Delete_Call{Call: _e.mock.On("Delete", modelId)}
}

func (_c *MockMachine_Delete_Call) Run(run func(modelId int)) *MockMachine_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockMachine_Delete_Call) Return(err error) *MockMachine_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMachine_Delete_Call) RunAndReturn(run func(modelId int) error) *MockMachine_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockMachine
func (_mock *MockMachine) Get() ([]model.Machine, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []model.Machine
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]model.Machine, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []model.Machine); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Machine)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMachine_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockMachine_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
func (_e *MockMachine_Expecter) Get() *MockMachine_Get_Call {
	return &MockMachine_Get_Call{Call: _e.mock.On("Get")}
}

func (_c *MockMachine_Get_Call) Run(run func()) *MockMachine_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMachine_Get_Call) Return(machines []model.Machine, err error) *MockMachine_Get_Call {
	_c.Call.Return(machines, err)
	return _c
}

func (_c *MockMachine_Get_Call) RunAndReturn(run func() ([]model.Machine, error)) *MockMachine_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function for the type MockMachine
func (_mock *MockMachine) GetById(modelId int) (model.Machine, error) {
	ret := _mock.Called(modelId)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 model.Machine
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int) (model.Machine, error)); ok {
		return returnFunc(modelId)
	}
	if returnFunc, ok := ret.Get(0).(func(int) model.Machine); ok {
		r0 = returnFunc(modelId)
	} else {
		r0 = ret.Get(0).(model.Machine)
	}
	if returnFunc, ok := ret.Get(1).(func(int) error); ok {
		r1 = returnFunc(modelId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMachine_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type MockMachine_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - modelId
func (_e *MockMachine_Expecter) GetById(modelId interface{}) *MockMachine_GetById_Call {
	return &MockMachine_GetById_Call{Call: _e.mock.On("GetById", modelId)}
}

func (_c *MockMachine_GetById_Call) Run(run func(modelId int)) *MockMachine_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockMachine_GetById_Call) Return(model1 model.Machine, err error) *MockMachine_GetById_Call {
	_c.Call.Return(model1, err)
	return _c
}

func (_c *MockMachine_GetById_Call) RunAndReturn(run func(modelId int) (model.Machine, error)) *MockMachine_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function for the type MockMachine
func (_mock *MockMachine) Insert(model1 *model.Machine) error {
	ret := _mock.Called(model1)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*model.Machine) error); ok {
		r0 = returnFunc(model1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMachine_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type MockMachine_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - model1
func (_e *MockMachine_Expecter) Insert(model1 interface{}) *MockMachine_Insert_Call {
	return &MockMachine_Insert_Call{Call: _e.mock.On("Insert", model1)}
}

func (_c *MockMachine_Insert_Call) Run(run func(model1 *model.Machine)) *MockMachine_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Machine))
	})
	return _c
}

func (_c *MockMachine_Insert_Call) Return(err error) *MockMachine_Insert_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMachine_Insert_Call) RunAndReturn(run func(model1 *model.Machine) error) *MockMachine_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockMachine
func (_mock *MockMachine) Update(model1 *model.Machine) error {
	ret := _mock.Called(model1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*model.Machine) error); ok {
		r0 = returnFunc(model1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMachine_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockMachine_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - model1
func (_e *MockMachine_Expecter) Update(model1 interface{}) *MockMachine_Update_Call {
	return &MockMachine_Update_Call{Call: _e.mock.On("Update", model1)}
}

func (_c *MockMachine_Update_Call) Run(run func(model1 *model.Machine)) *MockMachine_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Machine))
	})
	return _c
}

func (_c *MockMachine_Update_Call) Return(err error) *MockMachine_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMachine_Update_Call) RunAndReturn(run func(model1 *model.Machine) error) *MockMachine_Update_Call {
	_c.Call.Return(run)
	return _c
}
